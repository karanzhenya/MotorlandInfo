[{"D:\\new\\src\\App.js":"1","D:\\new\\src\\index.js":"2","D:\\new\\src\\reportWebVitals.js":"3","D:\\new\\src\\state.js":"4","D:\\new\\src\\Button.js":"5","D:\\new\\src\\Work.js":"6"},{"size":1007,"mtime":1615148598512,"results":"7","hashOfConfig":"8"},{"size":501,"mtime":1612084381689,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611746338302,"results":"10","hashOfConfig":"8"},{"size":122403,"mtime":1625691021918,"results":"11","hashOfConfig":"8"},{"size":802,"mtime":1614032313911,"results":"12","hashOfConfig":"8"},{"size":766,"mtime":1612207499655,"results":"13","hashOfConfig":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"s662gr",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1eusngq","D:\\new\\src\\App.js",["28"],"import './App.css';\nimport state from './state'\nimport {Button} from \"./Button\";\nimport {useState} from \"react\";\nimport {Grid} from \"@material-ui/core\";\n\n\nexport default function App(props) {\n\n    /*let names = state.map(t => t.name)\n    console.log(names)\n    let model = state.map(m => m.models)\n    console.log(model)*/\n    /*function callName (id) {\n        let a = state.find(k => k.id === id)\n        console.log(a)\n        let b = a.models.map(ab => console.log(ab.type))\n    }*/\n\n    /*let [password, setPassword] = useState(\"\");\n    const changePassword = (e) => {\n        setPassword(e.currentTarget.value)\n    }*/\n    return (\n        <div className={\"app-wrapper\"}>\n            {/*<Grid container>\n                <input onChange={changePassword} className={'password'} value={password} type={\"password\"}/>\n            </Grid>\n            {password == \"1111\" ? <Grid item> <Button state={state}/> </Grid> : \"\"}*/}\n            <Grid item> <Button state={state}/> </Grid>\n        </div>\n    )\n}\n\n\n","D:\\new\\src\\index.js",[],"D:\\new\\src\\reportWebVitals.js",[],"D:\\new\\src\\state.js",[],"D:\\new\\src\\Button.js",[],"D:\\new\\src\\Work.js",["29"],{"ruleId":"30","severity":1,"message":"31","line":4,"column":9,"nodeType":"32","messageId":"33","endLine":4,"endColumn":17},{"ruleId":"34","severity":1,"message":"35","line":11,"column":9,"nodeType":"36","endLine":11,"endColumn":22},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]